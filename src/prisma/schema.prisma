datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String          @default("CITIZEN")
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Functionality Part related to the application

  reports  Report[]  @relation("reportedBy")
  comments Comment[] @relation("commentedBy")

  // Additional Details related to the User
  phone String?
  state String?
  city String?
  postalCode String?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// **************************************************************
// Functionality Part related to the application
// **************************************************************

enum UserRole {
  ADMIN
  POLICE_OFFICER
  INVESTIGATOR
  CITIZEN
}

model Report {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  incidentDate     DateTime
  incidentTime     String?
  location         Location
  reportType       ReportType
  status           ReportStatus      @default(SUBMITTED)
  priority         Priority          @default(NORMAL)
  evidence         String?
  reporterId       String?           @db.ObjectId
  reporter         User?             @relation("reportedBy", fields: [reporterId], references: [id])
  anonymous        Boolean           @default(false)
  comments         Comment[]
  witnesses        String?
  suspects         String?
  mediaAttachments MediaAttachment[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

type Location {
  address     String?
  city        String
  state       String
  country     String       @default("India")
  postalCode  String? // Optional is good for international addresses
  coordinates Coordinates? // GeoJSON

  landmark String?
}

type Coordinates {
  type        String  @default("Point")
  coordinates Float[] // [longitude, latitude]
}

enum ReportType {
  THEFT
  ASSAULT
  VANDALISM
  FRAUD
  MISSING_PERSON
  DOMESTIC_VIOLENCE
  BURGLARY
  ACCIDENT
  DRUG_RELATED
  OTHER
}

enum ReportStatus {
  SUBMITTED
  UNDER_REVIEW
  INVESTIGATING
  RESOLVED
  CLOSED
  REJECTED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  reportId   String   @db.ObjectId
  report     Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation("commentedBy", fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isInternal Boolean  @default(false)
}

model MediaAttachment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName   String
  fileType   String
  fileSize   Int
  fileUrl    String
  uploadDate DateTime @default(now())
  reportId   String   @db.ObjectId
  report     Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}
